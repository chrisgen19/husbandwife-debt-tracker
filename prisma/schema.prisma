// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(cuid())
  firstName            String
  lastName             String
  email                String              @unique
  password             String
  role                 String              // "husband" or "wife"
  partnerId            String?             @unique
  partner              User?               @relation("Partner", fields: [partnerId], references: [id])
  partnerOf            User?               @relation("Partner")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt

  debtsPaid            DebtItem[]          @relation("PaidBy")
  debtsOwed            DebtItem[]          @relation("OwedBy")

  sentRequests         ConnectionRequest[] @relation("RequestSender")
  receivedRequests     ConnectionRequest[] @relation("RequestReceiver")
}

model ConnectionRequest {
  id         String   @id @default(cuid())
  senderId   String
  sender     User     @relation("RequestSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiverId String
  receiver   User     @relation("RequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  status     String   @default("pending") // "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([senderId, receiverId])
}

model DebtItem {
  id          String    @id @default(cuid())
  description String
  amount      Float
  isPaid      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  paidAt      DateTime?

  paidBy      String
  paidByUser  User      @relation("PaidBy", fields: [paidBy], references: [id])

  owedBy      String
  owedByUser  User      @relation("OwedBy", fields: [owedBy], references: [id])
}
